version: '3.8'

# ConfiFlow - Docker Compose Configuration
# Author: Ashwini Kumar Tarai
# Description: Complete ConfiFlow stack with all services

services:
  # Frontend Service
  frontend:
    build:
      context: ./confiflow-ui
      dockerfile: Dockerfile
    container_name: confiflow-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=http://backend:5000
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - confiflow-network
    restart: unless-stopped

  # Backend Service
  backend:
    build:
      context: ./confiflow-backend
      dockerfile: Dockerfile
    container_name: confiflow-backend
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=postgresql://confiflow:${DB_PASSWORD:-password}@db:5432/confiflow
      - OLLAMA_URL=http://ollama:11434/api/generate
      - N8N_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY:-}
      - CORS_ORIGINS=http://localhost,http://frontend
    depends_on:
      - db
      - ollama
      - n8n
    volumes:
      - backend-uploads:/app/uploads
      - backend-logs:/app/logs
    networks:
      - confiflow-network
    restart: unless-stopped

  # Database Service
  db:
    image: postgres:15-alpine
    container_name: confiflow-db
    environment:
      - POSTGRES_DB=confiflow
      - POSTGRES_USER=confiflow
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - confiflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U confiflow -d confiflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama Service (Local LLM)
  ollama:
    image: ollama/ollama:latest
    container_name: confiflow-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
    networks:
      - confiflow-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: confiflow-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-password}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=db
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=confiflow
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - n8n-data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - db
    networks:
      - confiflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: confiflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    networks:
      - confiflow-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: confiflow-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - confiflow-network
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: confiflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - confiflow-network
    restart: unless-stopped

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: confiflow-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - confiflow-network
    restart: unless-stopped

# Named Volumes
volumes:
  postgres-data:
    driver: local
  ollama-data:
    driver: local
  n8n-data:
    driver: local
  redis-data:
    driver: local
  backend-uploads:
    driver: local
  backend-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Networks
networks:
  confiflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

